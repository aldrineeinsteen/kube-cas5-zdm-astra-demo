#!/usr/bin/env python3
"""
Test Astra DB connectivity using secure connect bundle and token
"""
import os
os.environ['CASSANDRA_DRIVER_ALLOW_SYNC_IN_ASYNC'] = '1'

from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.policies import DCAwareRoundRobinPolicy
import json
import sys

def test_astra_connection():
    # This secure connect bundle is autogenerated when you download your SCB
    cloud_config = {
        'secure_connect_bundle': 'secure-connect-migration-cql-demo.zip'
    }

    # Load token JSON file
    try:
        with open("migration-cql-demo-token.json") as f:
            secrets = json.load(f)
    except FileNotFoundError:
        print("‚ùå Error: migration-cql-demo-token.json file not found")
        return False

    CLIENT_ID = secrets["clientId"]
    CLIENT_SECRET = secrets["secret"]

    print(f"üîê Using Client ID: {CLIENT_ID}")
    print(f"üì¶ Using Secure Connect Bundle: secure-connect-migration-cql-demo.zip")

    try:
        auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
        cluster = Cluster(
            cloud=cloud_config, 
            auth_provider=auth_provider,
            protocol_version=4
        )
        session = cluster.connect()

        print("‚úÖ Successfully connected to Astra DB!")
        
        # Test basic query
        row = session.execute("SELECT release_version FROM system.local").one()
        if row:
            print(f"üöÄ Astra DB version: {row[0]}")
        else:
            print("‚ö†Ô∏è  Could not retrieve version information")

        # List keyspaces
        keyspaces = session.execute("SELECT keyspace_name FROM system_schema.keyspaces")
        print("üìö Available keyspaces:")
        for ks in keyspaces:
            print(f"  - {ks.keyspace_name}")

        # Check if demo keyspace exists
        demo_exists = False
        for ks in keyspaces:
            if ks.keyspace_name == 'demo':
                demo_exists = True
                break
        
        if not demo_exists:
            print("üîß Creating demo keyspace...")
            session.execute("""
                CREATE KEYSPACE IF NOT EXISTS demo
                WITH replication = {'class': 'NetworkTopologyStrategy', 'us-east-1': 3}
            """)
            print("‚úÖ Demo keyspace created")

        # Use demo keyspace and check/create table
        session.set_keyspace('demo')
        
        # Check if users table exists
        tables = session.execute("SELECT table_name FROM system_schema.tables WHERE keyspace_name = 'demo'")
        table_exists = False
        for table in tables:
            if table.table_name == 'users':
                table_exists = True
                break
        
        if not table_exists:
            print("üîß Creating users table...")
            session.execute("""
                CREATE TABLE IF NOT EXISTS demo.users (
                    id UUID PRIMARY KEY,
                    name TEXT,
                    email TEXT,
                    gender TEXT,
                    address TEXT
                )
            """)
            print("‚úÖ Users table created")

        # Count existing records
        result = session.execute("SELECT COUNT(*) FROM demo.users")
        count = result.one()[0]
        print(f"üìä Current records in demo.users: {count}")

        session.shutdown()
        cluster.shutdown()
        return True

    except Exception as e:
        print(f"‚ùå Connection failed: {str(e)}")
        return False

if __name__ == "__main__":
    print("üîç Testing Astra DB connectivity...")
    success = test_astra_connection()
    sys.exit(0 if success else 1)